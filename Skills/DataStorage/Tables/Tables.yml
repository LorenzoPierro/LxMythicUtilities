#    _    _                              
#   | |  | |                             
#   | |  | |  ___    __ _    __ _    ___ 
#   | |  | | / __|  / _` |  / _` |  / _ \
#   | |__| | \__ \ | (_| | | (_| | |  __/
#    \____/  |___/  \__,_|  \__, |  \___|
#                            __/ |       
#                           |___/        
#
# This complex system of metaskills can generate and do operations on tables, a list of key-value pairs.
#
# Requires the String and the Formatter PAPI extensions to work.
#
# As i have implemented them, tables are a mic between arrays and maps, so the operations can be based on either the keys or the index of the element on the table.
#
# Most of the operations are done via the usage of the Utility_Table metaskill, while passing to it a relevant `mode` attribute.
# Since the metaskills here are extremely compliicated, their usage will be explained separately below, instead of "all at once" up here





#     _____                _               
#    / ____|              | |              
#   | (___   _   _  _ __  | |_  __ _ __  __
#    \___ \ | | | || '_ \ | __|/ _` |\ \/ /
#    ____) || |_| || | | || |_| (_| | >  < 
#   |_____/  \__, ||_| |_| \__|\__,_|/_/\_\
#             __/ |                        
#            |___/                         
#
# The syntax of a key-value pair is the following
#    key=type:value
#
# Where:
# - key --> a string
# - type --> the type of the value, can be int/float/string
# - value --> the actual value
#
# When a value parameter is required, once must use the type:value syntax
# For instance, if one wanted to pass a "1.2" float value as the value, one should use value=float:1.2




#    _______      _      _       
#   |__   __|    | |    | |      
#      | |  __ _ | |__  | |  ___ 
#      | | / _` || '_ \ | | / _ \
#      | || (_| || |_) || ||  __/
#      |_| \__,_||_.__/ |_| \___|
#
# The main metaskill to call to use table-related features
#
# Required parameters
# - mode --> sets the operation that the skill will use
# - <The parameters required by the operation selected>
#
# Output Format: none
#
# Possible Operation Modes --> called skill
#  - SET                   -->         Utility_Table_Set                            
#  - GET                   -->         Utility_Table_Get                            
#  - REMOVE                -->         Utility_Table_Remove                         
#  - RESIZE                -->         Utility_Table_Resize                         
#  - FOREACH               -->         Utility_Table_ForEach                        
#  - GETFIRSTKEY           -->         Utility_Table_GetFirstKey                    
#  - MOVETOLAST            -->         Utility_Table_MoveToLast                     
#  - GETKEYATINDEX         -->         Utility_Table_GetKeyAtIndex                  
#  - SORT                  -->         Utility_Table_Sort                           
#  - EXCHANGE              -->         Utility_Table_Exchange                       
#  - CLEAR                 -->         Utility_Table_Create                         
#  - COMPARE               -->         Utility_Table_Compare                        
Utility_Table:
  Skills:
  - setvariable{var=skill.mode;type=STRING;val=<skill.mode|NULL>} @self
  - setvariable{var=skill.key;type=STRING;val=<skill.key|NULL>} @self
  - skill:Utility_Table_Create @self ?!variableisset{var=caster.Utility_Table} @self
  - skill:Utility_Table_GetIndex @self ?!variableequals{var=skill.key;val=NULL}
  - skill:Utility_Table_SwitchMode @self
Utility_Table_SwitchMode:
  Conditions:
  - variableisset{var=skill.mode} true
  - variableequals{var=skill.mode;val=NULL} false
  - variableequals{var=skill.mode;val=SET} castinstead Utility_Table_Set                         # Sets the value of a key on the table
  - variableequals{var=skill.mode;val=GET} castinstead Utility_Table_Get                         # Gets the value of the specified key
  - variableequals{var=skill.mode;val=REMOVE} castinstead Utility_Table_Remove                   # Remove a key-value pair from the table
  - variableequals{var=skill.mode;val=RESIZE} castinstead Utility_Table_Resize                   # Resizes the table, updating its size. Normally an automatic process
  - variableequals{var=skill.mode;val=FOREACH} castinstead Utility_Table_ForEach                 # For each element on a table, executes a metaskill
  - variableequals{var=skill.mode;val=GETFIRSTKEY} castinstead Utility_Table_GetFirstKey         # Gets the value of the key in the first position
  - variableequals{var=skill.mode;val=MOVETOLAST} castinstead Utility_Table_MoveToLast           # Moves the specified key-value pair to the end of the table
  - variableequals{var=skill.mode;val=GETKEYATINDEX} castinstead Utility_Table_GetKeyAtIndex     # Gets the key at the specified index (ABSOLUTE)
  - variableequals{var=skill.mode;val=SORT} castinstead Utility_Table_Sort                       # Sorts the table
  - variableequals{var=skill.mode;val=EXCHANGE} castinstead Utility_Table_Exchange               # Exchanges the position of two key-value pairs 
  - variableequals{var=skill.mode;val=CLEAR} castinstead Utility_Table_Create                    # Resets the table
  - variableequals{var=skill.mode;val=COMPARE} castinstead Utility_Table_Compare                 # Compares the value of two values based on their keys




#    _    _                    _    _____        _                       
#   | |  | |                  | |  |  __ \      | |                      
#   | |  | | _ __   ___   ___ | |_ | |__) | ___ | |_  _   _  _ __  _ __  
#   | |  | || '_ \ / __| / _ \| __||  _  / / _ \| __|| | | || '__|| '_ \ 
#   | |__| || | | |\__ \|  __/| |_ | | \ \|  __/| |_ | |_| || |   | | | |
#    \____/ |_| |_||___/ \___| \__||_|  \_\\___| \__| \__,_||_|   |_| |_|
#                                                                        
# Unsets the result variable, so that no incorrect value is wrongly returned
#
# Required Parameters: none
# Output Format: none
Utility_Table_UnsetReturn:
  Skills:
  - variableunset{var=skill.return}
  - variableunset{var=skill.returntype}





#     _____                    _        
#    / ____|                  | |       
#   | |      _ __  ___   __ _ | |_  ___ 
#   | |     | '__|/ _ \ / _` || __|/ _ \
#   | |____ | |  |  __/| (_| || |_|  __/
#    \_____||_|   \___| \__,_| \__|\___|
#
# Creates the Table
#
# Required Parameters: none
# Output Format: none
Utility_Table_Create:
  Skills:
  - setvariable{var=caster.Utility_Table;type=STRING;val=";"}
  - setvariable{var=caster.Utility_Table_Size;val=0}
  - setvariable{var=caster.Utility_Table_Autosort;type=STRING;val=<skill.autosort|false>}




#                 _      _ 
#       /\       | |    | |
#      /  \    __| |  __| |
#     / /\ \  / _` | / _` |
#    / ____ \| (_| || (_| |
#   /_/    \_\\__,_| \__,_|
#
# Add a key-value pair to the Table
#
# Required Parameters:
# - key
# - value
#
# Output Format: none
Utility_Table_Add:
  Skills:
  - setvariable{var=caster.Utility_Table;type=STRING;val="<caster.var.Utility_Table><skill.key>=<skill.value>;"} @self
  - variableadd{var=caster.Utility_Table_Size;a=1}




#     _____        _   
#    / ____|      | |  
#   | (___    ___ | |_ 
#    \___ \  / _ \| __|
#    ____) ||  __/| |_ 
#   |_____/  \___| \__|
#
# Sets the value of the specified key to the specified value
#
# Required Parameters:
# - key
# - value
#
# Output Format: none
Utility_Table_Set:
  Conditions:
  - variableequals{var=skill.key_start;val=-1} castinstead Utility_Table_Add
  Skills:
  - skill:Utility_Table_Get
  - setvariable{var=caster.Utility_Table;type=STRING;val="%string_substring_0,<skill.var.key_end>_<caster.var.Utility_Table>%=<skill.value>%string_substring_<skill.var.value_end>_<caster.var.Utility_Table>%"} @self




#     _____        _   
#    / ____|      | |  
#   | |  __   ___ | |_ 
#   | | |_ | / _ \| __|
#   | |__| ||  __/| |_ 
#    \_____| \___| \__|
#
# Returns the value and type of the selected key
#
# Required Parameters:
# - key
#
# Output Format:
# - skill.var.returntype --> contains the type of the value returned
# - skill.var.return --> contains the value fetched. Its type will be differtent based on the returntype
Utility_Table_Get:
  Conditions:
  - variableequals{var=skill.key_start;val=-1} castinstead Utility_Table_UnsetReturn
  Skills:
  - setvariable{var=skill.returntype;type=STRING;val=%string_substring_<skill.var.type_start>,<skill.var.type_end>_<caster.var.Utility_Table>%}
  - setvariable{var=skill.return;type=STRING;val=%string_substring_<skill.var.value_start>,<skill.var.value_end>_<caster.var.Utility_Table>%} ?variableequals{var=skill.returntype;val="string"}
  - setvariable{var=skill.return;type=INTEGER;val=%string_substring_<skill.var.value_start>,<skill.var.value_end>_<caster.var.Utility_Table>%} ?variableequals{var=skill.returntype;val="int"}
  - setvariable{var=skill.return;type=FLOAT;val=%string_substring_<skill.var.value_start>,<skill.var.value_end>_<caster.var.Utility_Table>%} ?variableequals{var=skill.returntype;val="float"}
  #- command{c="say <skill.var.return> <skill.var.returntype>"}
  #- signal{s=Utility_Table_Get} @self




#    _____                                    
#   |  __ \                                   
#   | |__) | ___  _ __ ___    ___ __   __ ___ 
#   |  _  / / _ \| '_ ` _ \  / _ \\ \ / // _ \
#   | | \ \|  __/| | | | | || (_) |\ V /|  __/
#   |_|  \_\\___||_| |_| |_| \___/  \_/  \___|
#                                             
# Removes the selected key(s) from the table
#
# Required Parameters:
# - key
#
# Output Format:
# - skill.var.returntype --> contains the type of the value returned
# - skill.var.return --> contains the value of the removed key-value pair. Its type will be differtent based on the returntype
Utility_Table_Remove:
  Skills:
  - setvariable{var=skill.Utility_Table_Remove_keylistelements;val=%string_indexOf_<skill.key>_<&cm>%}
  - skill:Utility_Table_Remove_Switch
  - variableunset{var=skill.Utility_Table_Remove_keylistelements}
Utility_Table_Remove_Switch:
  Conditions:
  - variableisset{var=skill.Utility_Table_Remove_keylistelements} true
  - variableequals{var=skill.Utility_Table_Remove_keylistelements;val=-1} castinstead Utility_Table_Remove_One
  Skills:
  - skill:Utility_Table_Remove_List
Utility_Table_Remove_List:
  Skills:
  - setvariable{var=skill.Utility_Table_Remove_List_FirstCommaIndex;type=INTEGER;val="%string_indexOf_<skill.key>_<&cm>%"}
  - setvariable{var=skill.Utility_Table_Remove_List_FirstElement;type=STRING;val="%string_substring_0,<skill.var.Utility_Table_Remove_List_FirstCommaIndex>_<skill.key>%"}
  - variableadd{var=skill.Utility_Table_Remove_List_FirstCommaIndex;amount=1}
  - setvariable{var=skill.Utility_Table_Remove_List_OtherElements;type=STRING;val="%string_substring_<skill.var.Utility_Table_Remove_List_FirstCommaIndex>_<skill.key>%"}
  - skill:Utility_Table{mode=REMOVE;key=<skill.var.Utility_Table_Remove_List_FirstElement>}
  - skill:Utility_Table{mode=REMOVE;key=<skill.var.Utility_Table_Remove_List_OtherElements>}
  #- command{c="say <skill.key> | <skill.var.Utility_Table_Remove_List_FirstElement> | <skill.var.Utility_Table_Remove_List_OtherElements>"}
Utility_Table_Remove_One:
  Conditions:
  - variableequals{var=skill.key_start;val=-1} castinstead Utility_Table_UnsetReturn
  Skills:
  - skill:Utility_Table_Get
  - setvariable{var=caster.Utility_Table;type=STRING;val="%string_substring_0,<skill.var.key_start>_<caster.var.Utility_Table>%%string_substring_<skill.var.value_end>_<caster.var.Utility_Table>%"} @self
  - variableadd{var=caster.Utility_Table_Size;a=-1}




#     _____        _    ______  _             _    _  __            
#    / ____|      | |  |  ____|(_)           | |  | |/ /            
#   | |  __   ___ | |_ | |__    _  _ __  ___ | |_ | ' /  ___  _   _ 
#   | | |_ | / _ \| __||  __|  | || '__|/ __|| __||  <  / _ \| | | |
#   | |__| ||  __/| |_ | |     | || |   \__ \| |_ | . \|  __/| |_| |
#    \_____| \___| \__||_|     |_||_|   |___/ \__||_|\_\\___| \__, |
#                                                              __/ |
#                                                             |___/ 
# Returns the value of the first key of the table
#
# Required Parameters: none
#
# Output Format:
# - skill.var.returntype --> contains the type of the value returned, in this case it being "key"
# - skill.var.return --> contains the name of the key in the first position
Utility_Table_GetFirstKey:
  Conditions:
  - variableinrange{var=caster.Utility_Table_Size;val=>0} orElseCast Utility_Table_UnsetReturn
  Skills:
  - setvariable{var=skill.return;type=STRING;val=%string_substring_1,{string_indexOf_<caster.var.Utility_Table>_=}_<caster.var.Utility_Table>%}
  - setvariable{var=skill.returntype;type=STRING;val=key}




#    __  __                 _______      _                  _   
#   |  \/  |               |__   __|    | |                | |  
#   | \  / |  ___ __   __ ___ | |  ___  | |      __ _  ___ | |_ 
#   | |\/| | / _ \\ \ / // _ \| | / _ \ | |     / _` |/ __|| __|
#   | |  | || (_) |\ V /|  __/| || (_) || |____| (_| |\__ \| |_ 
#   |_|  |_| \___/  \_/  \___||_| \___/ |______|\__,_||___/ \__|
#
# Moves the selected key to last place
# Required Parameters:
# - key
#
# Output Format: none
Utility_Table_MoveToLast:
  Conditions:
  - variableequals{var=skill.key_start;val=-1} castinstead Utility_Table_UnsetReturn
  Skills:
  - setvariable{var=skill.Utility_Table_MoveToLast_start;val=<skill.var.key_start>+1}
  - setvariable{var=skill.Utility_Table_MoveToLast_end;val=<skill.var.value_end>+1}
  - setvariable{var=skill.Utility_Table_MoveToLast_Buffer;type=STRING;val=%string_substring_<skill.var.Utility_Table_MoveToLast_start>,<skill.var.Utility_Table_MoveToLast_end>_<caster.var.Utility_Table>%}
  - setvariable{var=caster.Utility_Table;type=STRING;val="%string_substring_0,<skill.var.key_start>_<caster.var.Utility_Table>%%string_substring_<skill.var.value_end>_<caster.var.Utility_Table>%<skill.var.Utility_Table_MoveToLast_Buffer>"} @self




#     _____        _    _  __                      _    _____             _             
#    / ____|      | |  | |/ /                /\   | |  |_   _|           | |            
#   | |  __   ___ | |_ | ' /  ___  _   _    /  \  | |_   | |   _ __    __| |  ___ __  __
#   | | |_ | / _ \| __||  <  / _ \| | | |  / /\ \ | __|  | |  | '_ \  / _` | / _ \\ \/ /
#   | |__| ||  __/| |_ | . \|  __/| |_| | / ____ \| |_  _| |_ | | | || (_| ||  __/ >  < 
#    \_____| \___| \__||_|\_\\___| \__, |/_/    \_\\__||_____||_| |_| \__,_| \___|/_/\_\
#                                   __/ |                                               
#                                  |___/                                                
# Returns the key at the given index
# Required Parameters:
# - index --> the index, in the table, of the ; character that precedes the key-value pair
#
# Output Format:
# - skill.var.returntype --> contains the type of the value returned, in this case it being "key"
# - skill.var.return --> contains the name of the key in the selected position
Utility_Table_GetKeyAtIndex:
  #Conditions:
  #- variableinrange{var=caster.Utility_Table_Size;val=>0} orElseCast Utility_Table_UnsetReturn
  #- stringequals{v1=%string_charAt_<skill.index>_<caster.var.Utility_Table>%;v2=";"} true
  Skills:
  - setvariable{var=skill.return;type=STRING;val=%string_substring_<skill.index>_<caster.var.Utility_Table>%}
  - setvariable{var=skill.return;type=STRING;val=%string_substring_1,{string_indexOf_<skill.var.return>_=}_<skill.var.return>%}
  - setvariable{var=skill.returntype;type=STRING;val=key}
  #- command{c="say <skill.var.return>"}




#    ______            ______              _     
#   |  ____|          |  ____|            | |    
#   | |__  ___   _ __ | |__    __ _   ___ | |__  
#   |  __|/ _ \ | '__||  __|  / _` | / __|| '_ \ 
#   | |  | (_) || |   | |____| (_| || (__ | | | |
#   |_|   \___/ |_|   |______|\__,_| \___||_| |_|
#
# Execute a skill for each element of the table
# Required Parameters:
# - elementskill --> the skill to execute
#
# Output Format:
# - skill.var.returntype --> contains the type of the value returned, in this case it being "key". Each time the elementskill is triggered, this value is updated
# - skill.var.return --> contains the name of the key in the selected position. Each time the elementskill is triggered, this value is updated
# - skill.var.Utility_Table_ForEach_Iteration --> the current iteration. Starts at 0 and increases by 1 every new element parsed
Utility_Table_ForEach:
  Skills:
  #- setvariable{var=skill.Utility_Table_ForEach_List;val=<caster.var.Utility_Table>}
  - setvariable{var=skill.Utility_Table_ForEach_Index;val=0}
  - setvariable{var=skill.Utility_Table_ForEach_Iteration;val=0}
  - skill:Utility_Table_ForEach_Iteraction
Utility_Table_ForEach_Iteraction:
  Conditions:
  - variableinrange{var=skill.Utility_Table_ForEach_Iteration;val=<<caster.var.Utility_Table_Size>} true
  Skills:
  - skill:Utility_Table_GetKeyAtIndex{index=<skill.var.Utility_Table_ForEach_Index>}
  - vskill{s=<skill.elementskill>}

  - skill:Utility_Table_GetIndex{key=<skill.var.return>}
  - setvariable{var=skill.Utility_Table_ForEach_Index;val=<skill.var.value_end>}

  - variableadd{var=skill.Utility_Table_ForEach_Iteration;a=1}
  - skill:Utility_Table_ForEach_Iteraction




#     _____                                           
#    / ____|                                          
#   | |      ___   _ __ ___   _ __    __ _  _ __  ___ 
#   | |     / _ \ | '_ ` _ \ | '_ \  / _` || '__|/ _ \
#   | |____| (_) || | | | | || |_) || (_| || |  |  __/
#    \_____|\___/ |_| |_| |_|| .__/  \__,_||_|   \___|
#                            | |                      
#                            |_|                      
# Compares two keys. returns -1 if val(key1)>=val(key2) and 1 if val(key1)<val(key2)
# 
# Required Parameters:
# - key1
# - key2
#
# Output Format:
# - skill.var.return --> The result of the comparison
Utility_Table_Compare:
  Skills:
  - variableunset{var=skill.return}

  - skill:Utility_Table{mode=GET;key=<skill.key1>}
  - setvariable{var=skill.key1_type;type=STRING;val=<skill.var.returntype>}
  - setvariable{var=skill.key1_value;type=INTEGER;val=<skill.var.return>} ?variableequals{var=skill.key1_type;val="int"}
  - setvariable{var=skill.key1_value;type=FLOAT;val=<skill.var.return>} ?variableequals{var=skill.key1_type;val="float"}
  - setvariable{var=skill.key1_value;type=STRING;val=<skill.var.return>} ?variableequals{var=skill.key1_type;val="string"}

  - variableunset{var=skill.return}

  - skill:Utility_Table{mode=GET;key=<skill.key2>}
  - setvariable{var=skill.key2_type;type=STRING;val=<skill.var.returntype>}
  - setvariable{var=skill.key2_value;type=INTEGER;val=<skill.var.return>} ?variableequals{var=skill.key2_type;val="int"}
  - setvariable{var=skill.key2_value;type=FLOAT;val=<skill.var.return>} ?variableequals{var=skill.key2_type;val="float"}
  - setvariable{var=skill.key2_value;type=STRING;val=<skill.var.return>} ?variableequals{var=skill.key2_type;val="string"}

  - skill:Utility_Table_Compare_2
Utility_Table_Compare_2:
  Conditions:
  - variableisset{var=skill.key1_value} true
  - variableisset{var=skill.key2_value} true
  Skills:
  - variableunset{var=skill.return}

  - setvariable{var=skill.return;val=-1} ?variableequals{var=skill.key1_type;val="string"}
  - setvariable{var=skill.return;val=1} ?variableequals{var=skill.key2_type;val="string"}

  - skill{s=[
    - setvariable{var=skill.diff;type=FLOAT;val=<skill.var.key1_value>-<skill.var.key2_value>}
    - setvariable{var=skill.return;val=-<skill.var.diff>/abs(<skill.var.diff>)}
    - variableunset{var=skill.diff} ]} ?!variableisset{var=skill.return}
  #- message{m="<skill.key1>=<skill.var.key1_value> <skill.key2>=<skill.var.key2_value> <skill.var.return>"} @World




#    ______             _                                
#   |  ____|           | |                               
#   | |__   __  __ ___ | |__    __ _  _ __    __ _   ___ 
#   |  __|  \ \/ // __|| '_ \  / _` || '_ \  / _` | / _ \
#   | |____  >  <| (__ | | | || (_| || | | || (_| ||  __/
#   |______|/_/\_\\___||_| |_| \__,_||_| |_| \__, | \___|
#                                             __/ |      
#                                            |___/       
# Exchanges the position of two keys
# Required Parameters:
# - key1
# - key2
#
# Output Format: none
Utility_Table_Exchange:
  Skills:
  - skill:Utility_Table_GetIndex{key=<skill.key1>}
  - setvariable{var=skill.key1_start;val=<skill.var.key_start>}
  - setvariable{var=skill.key1_end;val=<skill.var.value_end>}

  - skill:Utility_Table_GetIndex{key=<skill.key2>}
  - setvariable{var=skill.key2_start;val=<skill.var.key_start>}
  - setvariable{var=skill.key2_end;val=<skill.var.value_end>}

  - skill:Utility_Table_Exchange_2
Utility_Table_Exchange_2:
  Conditions:
  - variableequals{var=skill.key1_start;val=-1} castinstead Utility_Table_UnsetReturn
  - variableequals{var=skill.key2_start;val=-1} castinstead Utility_Table_UnsetReturn
  Skills:
  - skill{s=[
    - setvariable{var=skill.temp;val=<skill.var.key1_start>}
    - setvariable{var=skill.key1_start;val=<skill.var.key2_start>}
    - setvariable{var=skill.key2_start;val=<skill.var.temp>}

    - setvariable{var=skill.temp;val=<skill.var.key1_end>}
    - setvariable{var=skill.key1_end;val=<skill.var.key2_end>}
    - setvariable{var=skill.key2_end;val=<skill.var.temp>}
    ]} ?variableinrange{var=skill.key1_start;val=><skill.var.key2_start>}

  - setvariable{var=key1_all;type=STRING;val=%string_substring_<skill.var.key1_start>,<skill.var.key1_end>_<caster.var.Utility_Table>%}
  - setvariable{var=key2_all;type=STRING;val=%string_substring_<skill.var.key2_start>,<skill.var.key2_end>_<caster.var.Utility_Table>%}
  - setvariable{var=caster.Utility_Table;type=STRING;val=%string_substring_0,<skill.var.key1_start>_<caster.var.Utility_Table>%<skill.var.key2_all>%string_substring_<skill.var.key1_end>,<skill.var.key2_start>_<caster.var.Utility_Table>%<skill.var.key1_all>%string_substring_<skill.var.key2_end>_<caster.var.Utility_Table>%}




#     _____               _   
#    / ____|             | |  
#   | (___    ___   _ __ | |_ 
#    \___ \  / _ \ | '__|| __|
#    ____) || (_) || |   | |_ 
#   |_____/  \___/ |_|    \__|
#
# Sorts the table
#
# Required Parameters: none
# Output Format: none
Utility_Table_Sort:
  Skills:
  - skill:Utility_Skill_Repeat{repeatskill=Utility_Table_Sort_List;i=2}
Utility_Table_Sort_List:
  Skills:
  - variableunset{var=skill.Utility_Table_Element_lastkey}
  - skill:Utility_Table_ForEach{elementskill=Utility_Table_Element}
Utility_Table_Element:
  Skills:
  - setvariable{var=skill.Utility_Table_Element_newkey;type=STRING;val=<skill.var.return>}
  - skill{s=[
    - skill:Utility_Table_Compare{key1=<skill.var.Utility_Table_Element_lastkey>;key2=<skill.var.Utility_Table_Element_newkey>}
    - skill:Utility_Table_Exchange{key1=<skill.var.Utility_Table_Element_lastkey>;key2=<skill.var.Utility_Table_Element_newkey>} ?variableequals{var=skill.return;val=-1}
    ]} ?variableisset{var=skill.Utility_Table_Element_lastkey}

  - setvariable{var=skill.Utility_Table_Element_lastkey;type=STRING;val=<skill.var.Utility_Table_Element_newkey>}




#    _____             _           
#   |  __ \           (_)          
#   | |__) | ___  ___  _  ____ ___ 
#   |  _  / / _ \/ __|| ||_  // _ \
#   | | \ \|  __/\__ \| | / /|  __/
#   |_|  \_\\___||___/|_|/___|\___|
#
# Recalculate the size of the Table
# 
# Required Parameters: none
# Output Format: none
Utility_Table_Resize:
  Skills:
  - setvariable{var=caster.Utility_Table_Size;type=INTEGER;val=%string_length_<caster.var.Utility_Table>% - %string_length_{formatter_text_replace_<&sc>__<caster.var.Utility_Table>}% - 1}




#     _____        _    _____             _             
#    / ____|      | |  |_   _|           | |            
#   | |  __   ___ | |_   | |   _ __    __| |  ___ __  __
#   | | |_ | / _ \| __|  | |  | '_ \  / _` | / _ \\ \/ /
#   | |__| ||  __/| |_  _| |_ | | | || (_| ||  __/ >  < 
#    \_____| \___| \__||_____||_| |_| \__,_| \___|/_/\_\
#
# Fundamental skill. Updates the index for the selected key. A lot of other skills uses this one's results to work.
#
# Required Parameters:
# - key
Utility_Table_GetIndex:
  Skills:
  - setvariable{var=skill.Utility_Table_GetIndex_key;type=STRING;val=<skill.key|NULL>} @self
  
  - setvariable{var=skill.key_start;type=INTEGER;val=-1} @self
  - setvariable{var=skill.key_start;type=INTEGER;val=%string_indexOf_<caster.var.Utility_Table>_<&sc><skill.var.Utility_Table_GetIndex_key>=%} @self ?!variableequals{var=skill.Utility_Table_GetIndex_key;val=NULL}

  - skill{s=[
    - setvariable{var=skill.key_length;type=INTEGER;val=%string_length_<skill.var.Utility_Table_GetIndex_key>%}
    - setvariable{var=skill.key_end;type=INTEGER;val=<skill.var.key_start>+<skill.var.key_length>+1}

    - setvariable{var=skill.type_start;type=INTEGER;val=<skill.var.key_end>+1}
    - setvariable{var=skill.type_lenght;type=STRING;val=%string_indexOf_{string_substring_<skill.var.type_start>_<caster.var.Utility_Table>}_<&co>%}
    - setvariable{var=skill.type_end;type=INTEGER;val=<skill.var.type_start>+<skill.var.type_lenght>}
    
    - setvariable{var=skill.value_start;type=INTEGER;val=<skill.var.type_end>+1}
    - setvariable{var=skill.value_lenght;type=STRING;val=%string_indexOf_{string_substring_<skill.var.value_start>_<caster.var.Utility_Table>}_<&sc>%}
    - setvariable{var=skill.value_end;type=INTEGER;val=<skill.var.value_start>+<skill.var.value_lenght>} ]} ?!variableequals{var=skill.key_start;val=-1}